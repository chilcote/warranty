#!/usr/bin/python3

##############################################################################
#  Copyright Â© 2014-2021 Joseph Chilcote
#
#  Licensed under the Apache License, Version 2.0 (the "License"); you may not
#  use this file except in compliance with the License. You may obtain a copy
#  of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
##############################################################################

"""Mac manufacture date estimation script.

This script returns the serial, model identifier, and estimated manufacture date.
Input can be one or more given serial numbers, or a text file listing serials.

This script would not be possible without great work provided by the community:
- https://github.com/pudquick/pyMacdevice_info/blob/master/getdevice_info.py
- http://www.macrumors.com/2010/04/16/apple-tweaks-serial-number-format-with-new-macbook-pro/
- https://blog.kolide.com/determining-mac-hardware-manufacture-date-using-osquery-54091a9cccbb

usage: warranty [-h] [-i INPUT] ...

positional arguments:
  serials

optional arguments:
  -h, --help            show this help message and exit
  -i INPUT, --input INPUT
                        import serials from a file
"""

import argparse
import csv
import datetime
import plistlib
import os
import subprocess
import sys
import time
import xml.etree.ElementTree as ET


manu_weeks = {
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
    "C": 10,
    "D": 11,
    "F": 12,
    "G": 13,
    "H": 14,
    "J": 15,
    "K": 16,
    "M": 17,
    "N": 18,
    "L": 19,
    "P": 20,
    "Q": 21,
    "R": 22,
    "T": 23,
    "V": 24,
    "W": 25,
    "X": 26,
    "Y": 27,
}
manu_years = {
    "C": ["2020", 0],
    "D": ["2020", 26],
    "F": ["2021", 0],
    "G": ["2021", 26],
    "H": ["2022", 0],
    "J": ["2022", 26],
    "K": ["2013", 0],
    "L": ["2013", 26],
    "M": ["2014", 0],
    "N": ["2014", 26],
    "P": ["2015", 0],
    "Q": ["2015", 26],
    "R": ["2016", 0],
    "S": ["2016", 26],
    "T": ["2017", 0],
    "V": ["2017", 26],
    "W": ["2018", 0],
    "X": ["2018", 26],
    "Y": ["2019", 0],
    "Z": ["2019", 26],
}


def get_serial():
    output = subprocess.check_output(
        ["/usr/sbin/ioreg", "-c", "IOPlatformExpertDevice", "-d", "2", "-a"]
    )
    return plistlib.loads(output)["IORegistryEntryChildren"][0][
        "IOPlatformSerialNumber"
    ]


def get_manufacture_date(serial):
    manu_year = manu_years[serial[3]][0]
    manu_week = manu_weeks[serial[4]] + manu_years[serial[3]][1]
    year_time = datetime.date(year=int(manu_year), month=1, day=1)
    week_diff = datetime.timedelta(weeks=manu_week)
    return year_time + week_diff


def get_model(serial):
    url = "http://support-sp.apple.com/sp/product?cc=%s&lang=en_US" % serial[-4:]
    cmd = ["/usr/bin/curl", "--silent", "--location", url]
    response = subprocess.run(cmd, check=False, text=True, capture_output=True).stdout
    return ET.fromstring(response).find("configCode").text


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input", help="import serials from a file")
    parser.add_argument("serials", nargs=argparse.REMAINDER)
    args = parser.parse_args()

    serials = []

    if args.input:
        f = open(args.input, "r")
        for line in f.read().splitlines():
            serials.append(line)
    elif args.serials:
        serials = args.serials
    else:
        serials.append(get_serial())
        if not serials[0]:
            print("Error: Invalid or no serial number detected.")
            sys.exit(1)

    writer = csv.writer(sys.stdout)

    writer.writerow(
        [
            "Serial Number",
            "Product Description",
            "Manufactured Date",
        ]
    )

    for serial in serials:
        manu_date = get_manufacture_date(serial)
        model = get_model(serial)

        writer.writerow(
            [
                serial.upper(),
                model,
                manu_date,
            ]
        )


if __name__ == "__main__":
    main()
